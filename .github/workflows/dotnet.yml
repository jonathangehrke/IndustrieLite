name: .NET Build & Format

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]

# Cancel in-progress runs for the same branch
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

permissions:
  contents: read

jobs:
  build:
    runs-on: windows-latest
    timeout-minutes: 20
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '8.0.x'
          cache: true

      - name: Restore
        run: dotnet restore

      - name: Ensure global.json pins .NET 8
        shell: pwsh
        run: |
          if (!(Test-Path -LiteralPath ./global.json)) { throw 'global.json missing' }
          $json = Get-Content -Raw ./global.json | ConvertFrom-Json
          if (-not $json.sdk.version.StartsWith('8.')) { throw "global.json sdk.version must be 8.x; found $($json.sdk.version)" }

      - name: Verify formatting (whitespace only)
        run: dotnet format whitespace IndustrieLite.sln --verify-no-changes

      - name: Build
        run: dotnet build --configuration Release

      - name: Run unit tests (logic)
        run: dotnet test ./tests/IndustrieLite.Tests/IndustrieLite.Tests.csproj -c Release --no-restore --logger 'trx;LogFileName=tests.trx'

  ps-checks:
    runs-on: windows-latest
    timeout-minutes: 15
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Guard UID duplicates in dev-scripts/
        shell: pwsh
        run: |
          $uids = Get-ChildItem -Path dev-scripts -Filter *.cs.uid -ErrorAction SilentlyContinue
          if ($uids -and $uids.Count -gt 0) {
            Write-Host "Found UID duplicates under dev-scripts/:"
            $uids | ForEach-Object { Write-Host " - " $_.FullName }
            throw "dev-scripts/*.cs.uid are not allowed. Remove duplicates."
          } else {
            Write-Host "No UID duplicates found in dev-scripts/."
          }

      - name: Guard UI string-based signal names
        shell: pwsh
        run: |
          ./tools/ci/CheckUISignalStrings.ps1

      - name: Guard mixed indentation in ui/*.gd
        shell: pwsh
        run: |
          ./tools/ci/CheckGdscriptIndent.ps1

      - name: Guard EventNames file presence and content
        shell: pwsh
        run: |
          ./tools/ci/CheckEventNamesFile.ps1

      - name: Check Autoload order (project.godot)
        shell: pwsh
        run: |
          ./tools/ci/CheckAutoloadOrder.ps1

      - name: Check hardcoded /root NodePaths in .tscn
        shell: pwsh
        run: |
          ./tools/ci/CheckHardcodedNodePaths.ps1

      - name: Ensure Building/Economy managers use ServiceContainer only
        shell: pwsh
        run: |
          ./tools/ci/CheckManagerNoNodePath.ps1

      - name: Enforce no NodePath in code/
        shell: pwsh
        run: |
          ./tools/ci/CheckNoNodePathInCode.ps1

  unit-tests:
    runs-on: windows-latest
    timeout-minutes: 15
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '8.0.x'
          cache: true
      - name: Restore
        run: dotnet restore
      - name: Run unit tests (logic)
        run: dotnet test ./tests/IndustrieLite.Tests/IndustrieLite.Tests.csproj -c Release --no-restore

  godot-headless:
    runs-on: windows-latest
    timeout-minutes: 25
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '8.0.x'
          cache: true
      - name: Cache Godot 4.4 Mono
        uses: actions/cache@v4
        with:
          path: |
            godot
            godot.zip
          key: godot-v4.4-stable-mono-win64
      - name: Download Godot 4.4 .NET (Mono)
        shell: pwsh
        run: |
          $exe = (Get-ChildItem -Recurse -Path ./godot -Filter *mono_win64.exe -ErrorAction SilentlyContinue | Select-Object -First 1 | % { $_.FullName })
          if (-not $exe) {
            $url = "https://downloads.tuxfamily.org/godotengine/4.4/Godot_v4.4-stable_mono_win64.zip"
            $maxAttempts = 3
            $downloaded = $false
            for ($attempt = 1; $attempt -le $maxAttempts; $attempt++) {
              try {
                Invoke-WebRequest -Uri $url -OutFile godot.zip -ErrorAction Stop -MaximumRedirection 5 -UseBasicParsing -TimeoutSec 120
                $downloaded = $true
                break
              } catch {
                if ($attempt -lt $maxAttempts) {
                  Write-Warning "Godot download failed (attempt $attempt/$maxAttempts). Retrying in 30s..."
                  Start-Sleep -Seconds 30
                }
              }
            }
            if (-not $downloaded) {
              Write-Warning "Primary download failed after $maxAttempts attempts. Trying GitHub mirror..."
              $mirror = "https://github.com/godotengine/godot-builds/releases/download/4.4-stable/Godot_v4.4-stable_mono_win64.zip"
              Invoke-WebRequest -Uri $mirror -OutFile godot.zip -ErrorAction Stop -MaximumRedirection 5 -UseBasicParsing -TimeoutSec 120
            }
            if (!(Test-Path ./godot)) { New-Item -ItemType Directory -Force -Path ./godot | Out-Null }
            Expand-Archive godot.zip -DestinationPath ./godot -Force
          } else {
            Write-Host "Using cached Godot at $exe"
          }
      - name: Project Settings headless check
        shell: pwsh
        run: |
          $exe = Get-ChildItem -Recurse -Path ./godot -Filter *mono_win64.exe | Select-Object -First 1 | % { $_.FullName }
          & $exe --headless --path . --script res://tools/ci/ProjectSettingsDump.gd
      - name: Locate Godot executable and export env
        shell: pwsh
        run: |
          $exe = Get-ChildItem -Recurse -Path ./godot -Filter *mono_win64.exe | Select-Object -First 1 | % { $_.FullName }
          if (-not $exe) { throw 'Godot executable not found' }
          echo "GODOT4_BIN=$exe" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
          Write-Host "GODOT4_BIN=$exe"

      - name: Run BootSelfTest (headless)
        shell: pwsh
        run: |
          ./tools/ci/RunBootSelfTest.ps1 -VerboseLog

      - name: Run DI validation (headless)
        shell: pwsh
        run: |
          ./tools/ci/RunDI.ps1 -VerboseLog

      - name: Run Root.tscn load test (headless)
        shell: pwsh
        run: |
          & $env:GODOT4_BIN --headless --path . --script res://tools/ci/CheckRootLoad.gd
      - name: Run Save/Load Round-Trip tests (headless)
        shell: pwsh
        run: |
          ./tools/ci/RunSaveLoadTests.ps1 -VerboseLog
      - name: Run Schema Migration tests (headless)
        shell: pwsh
        run: |
          ./tools/ci/RunSaveLoadMigrations.ps1 -VerboseLog
